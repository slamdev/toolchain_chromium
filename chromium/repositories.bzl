"""Declare runtime dependencies

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("//chromium/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")

# WARNING: any changes in this function may be BREAKING CHANGES for users
# because we'll fetch a dependency which may be different from one that
# they were previously fetching later in their WORKSPACE setup, and now
# ours took precedence. Such breakages are challenging for users, so any
# changes in this function should be marked as BREAKING in the commit message
# and released only in semver majors.
def toolchain_chromium_dependencies():
    # The minimal version of bazel_skylib we require
    maybe(
        http_archive,
        name = "bazel_skylib",
        sha256 = "c6966ec828da198c5d9adbaa94c05e3a1c7f21bd012a0b29ba8ddbccb2c93b0d",
        urls = [
            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.1.1/bazel-skylib-1.1.1.tar.gz",
            "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.1.1/bazel-skylib-1.1.1.tar.gz",
        ],
    )

_DOC = "TODO"
_ATTRS = {
    "chromium_revision": attr.string(mandatory = True),
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
    "os": attr.string(mandatory = True),
    "filename": attr.string(mandatory = True),
    "sha256": attr.string(),
}

def _chromium_repo_impl(repository_ctx):
    file_url = "https://playwright.azureedge.net/builds/chromium/{}/chromium-{}.zip".format(repository_ctx.attr.chromium_revision, repository_ctx.attr.filename)

    repository_ctx.report_progress("Downloading and extracting CHROMIUM toolchain")
    repository_ctx.download_and_extract(
        url = file_url,
        stripPrefix = "chrome-{}".format(repository_ctx.attr.os),
        sha256 = repository_ctx.attr.sha256,
    )

    binary_path = "Chromium.app/Contents/MacOS/Chromium" if repository_ctx.attr.os == "mac" else "chrome"

    build_content = """#Generated by chromium/repositories.bzl
load("@slamdev_toolchain_chromium//chromium:toolchain.bzl", "chromium_toolchain")

filegroup(
    name = "chromium",
    srcs = glob(["**/**"]),
)

filegroup(
    name = "chromium_bin",
    srcs = ["{}"],
)

chromium_toolchain(
    name = "chromium_toolchain",
    target_tool = ":chromium",
    target_tool_path = ":chromium_bin",
)
""".format(binary_path)

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", build_content)

chromium_repositories = repository_rule(
    _chromium_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def chromium_register_toolchains(name, sha256, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "chromium_linux_amd64" -
      this repository is lazily fetched when chromium is needed for that platform.
    - TODO: create a convenience repository for the host platform like "chromium_host"
    - create a repository exposing toolchains for each platform like "chromium_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.

    Args:
        name: base name for all created repos, like "chromium0_6_1"
        **kwargs: passed to each chromium_repositories call
    """
    for platform in PLATFORMS.keys():
        chromium_repositories(
            name = name + "_" + platform,
            platform = platform,
            os = PLATFORMS[platform].os,
            filename = PLATFORMS[platform].filename,
            sha256 = sha256[platform],
            **kwargs
        )
        native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
    )
